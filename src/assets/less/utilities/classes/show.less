@import "../../variables";
@import "../mixins/grid";
@import "../mixins/show_hide";

.hide{
  display: none;
}

.show-block{
  display: block;
}

.show-inline{
  display: inline;
}

.show-inline-block{
  display: inline-block;
}

& {
  .for-each(@system-breakpoints); .-each(@pair) {
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);

    .show-for-@{key}{ .show-for(@value, block); }
    .show-inline-for-@{key}{ .show-for(@value, inline); }
    .show-inline-block-for-@{key}{ .show-for(@value, inline-block); }

    .hide-for-@{key}{ .hide-for(@value, block); }
    .hide-inline-for-@{key}{ .hide-for(@value, inline); }
    .hide-inline-block-for-@{key}{ .hide-for(@value, inline-block); }
  }
}

& {
  .for-each(@system-breakpoint-ranges); .-each(@arr) {
    @key: extract(@arr, 1);
    @minvalue: extract(@arr, 2);
    @maxvalue: extract(@arr, 4);

    .show-for-@{key}-only{ .show-for-only(@minvalue, @maxvalue, block); }
    .show-inline-for-@{key}-only{ .show-for-only(@minvalue, @maxvalue, inline); }
    .show-inline-block-for-@{key}-only{ .show-for-only(@minvalue, @maxvalue, inline-block); }

    .hide-for-@{key}-only{ .hide-for-only(@minvalue, @maxvalue, block); }
    .hide-inline-for-@{key}-only{ .hide-for-only(@minvalue, @maxvalue, inline); }
    .hide-inline-block-for-@{key}-only{ .hide-for-only(@minvalue, @maxvalue, inline-block); }
  }
}